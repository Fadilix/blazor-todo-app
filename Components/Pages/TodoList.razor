@page "/todolist"
@rendermode InteractiveServer
@using BlazorTodoApp.Models
@using BlazorTodoApp.Services
@inject TodoService todoService
@inject IJSRuntime JSRuntime

<h3>TodoList</h3>

@if (todos != null)
{
    <div class="table-responsive">
        <table class="table table-bordered table-striped table-hover">
            <thead class="table-primary">
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                    <th>IsCompleted</th>
                    <th>Action</th>
                </tr>
            </thead>

            <tbody>
                @foreach (Todo todo in todos)
                {
                    <tr>
                        <td>@todo.Title</td>
                        <td>@formatDescription(@todo.Description)</td>
                        <td>
                            @if (todo.IsCompleted)
                            {
                                <span class="badge bg-success">Completed</span>
                            }
                            else
                            {
                                <span class="badge bg-warning text-dark">Ongoing</span>
                            }
                        </td>
                        <td>
                            <button class="btn btn-success me-3" @onclick="() => CompleteTodoAsync(todo)">@(@todo.IsCompleted ? "Uncomplete" : "Complete")</button>
                            <a class="btn btn-warning me-3" href="updatetodo/@todo.Id">Update</a>
                            <button class="btn btn-danger me-3" @onclick="() => ConfirmDelete(todo)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    List<Todo> todos;

    protected string formatDescription(string text)
    {
        text = text.Length >= 20 ? text.Substring(0, 20) + "..." : text;
        return text;
    }

    protected override async Task OnInitializedAsync()
    {
        todos = await todoService.GetAllTodos();
    }

    protected async Task DeleteTodoAsync(Todo todo)
    {

        await todoService.DeleteATodo(todo.Id);
        todos.Remove(todo);
        StateHasChanged();
    }

    protected async Task CompleteTodoAsync(Todo todo)
    {
        todo.IsCompleted = !todo.IsCompleted;
        await todoService.UpdateTodo(todo);
        StateHasChanged();
        
    }

    protected async Task ConfirmDelete(Todo todo)
    {
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("confirmDelete");
        if (isConfirmed)
        {
            await DeleteTodoAsync(todo);
        }
    }
}

