@page "/todolist"
@using BlazorTodoApp.Services
@inject TodoService todoService
@inject AuthenticationStateProvider authenticationStateProvider
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@rendermode InteractiveServer

@attribute [Authorize]

<PageTitle>Todo list</PageTitle>
<h3>TodoList</h3>

@if (todos != null)
{
    <MudTable Class="table" Items="@todos.Take(4)" Hover="true" Breakpoint="Breakpoint.Sm" Loading="_loading" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTr>
                <MudTh>Title</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>IsCompleted</MudTh>
                <MudTh>Action</MudTh>
            </MudTr>
        </HeaderContent>
        <RowTemplate>
            @foreach (Todo todo in todos)
            {
            <MudTr>

                <MudTd>@todo.Title</MudTd>
                <MudTd>@formatDescription(@todo.Description)</MudTd>
                <MudTd>
                    @if (todo.IsCompleted)
                    {
                        <MudBadge Color="Color.Success">Completed</MudBadge>
                    }
                    else
                    {
                        <MudBadge Color="Color.Primary">Ongoing</MudBadge>
                    }
                </MudTd>
                <MudTd>
                    <MudButton @onclick="() => CompleteTodoAsync(todo)">@(@todo.IsCompleted ? "Uncomplete" : "Complete")</MudButton>
                    <MudLink class="btn btn-warning me-3" Href=@($"updatetodo/{@todo.Id}")>Update</MudLink>
                    <MudButton class="btn btn-danger me-3" @onclick="() => DeleteTodoAsync(todo)">Delete</MudButton>
                </MudTd>
            </MudTr>
            }
        </RowTemplate>
    </MudTable>
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    private bool _loading;
    List<Todo> todos = new List<Todo>();

    protected string formatDescription(string text)
    {
        text = text.Length >= 30 ? text.Substring(0, 30) + "..." : text;
        return text;
    }

    string UserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            UserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
            todos = await todoService.GetAllTodosAsync(UserId);
        }
    }

    protected async Task DeleteTodoAsync(Todo todo)
    {
        await todoService.DeleteTodoByIdAsync(todo.Id);
        todos.Remove(todo);
        StateHasChanged();
    }

    protected async Task CompleteTodoAsync(Todo todo)
    {
        todo.IsCompleted = !todo.IsCompleted;
        await todoService.UpdateTodoAsync(todo);
        StateHasChanged();
    }
}
