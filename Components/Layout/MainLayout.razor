@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization

@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Dense="@dense">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" @onclick="@DrawerToggle" />
        TodoListApplication
    </MudAppBar>
    <MudDrawer Style="background-color: #fff" @bind-Open="@_drawerOpen" ClipMode="clipMode" Breakpoint="breakpoint" PreserveOpenState="preserveOpenState" Elevation="1" Variant="DrawerVariant.Mini">
        <MudNavMenu Style="height: 100vh;">
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home" Href="/">Home</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.PlusOne" Href="/counter">Counter</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Cloud" Href="/weather">Weather</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Add" Href="/addtodo">Add todo</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList" Href="/todolist">Todo list</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        <div class="m-4">
            @Body
        </div>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool IsUserSignedIn;
    bool _drawerOpen = false;
    bool dense = false;
    bool preserveOpenState = false;
    Breakpoint breakpoint = Breakpoint.Lg;
    DrawerClipMode clipMode = DrawerClipMode.Never;

    protected override async Task OnInitializedAsync()
    {
        IsUserSignedIn = await IsUserSignedInAsync();
    }

    private async Task<bool> IsUserSignedInAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.Identity.IsAuthenticated;
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
        Console.Write("gkh");
    }
}
